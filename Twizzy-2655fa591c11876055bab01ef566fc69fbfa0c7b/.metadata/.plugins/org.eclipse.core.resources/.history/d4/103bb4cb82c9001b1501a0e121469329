package tesseract;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.Vector;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;

import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfByte;
import org.opencv.core.Scalar;
import org.opencv.highgui.Highgui;

import Utilitaires.MaBibliothequeTraitementImage;

public class Preparation {
	static {
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
	}
	
		
		public static void afficheImage(String title, Mat img){
			MatOfByte matOfByte=new MatOfByte();
			Highgui.imencode(".png",img,matOfByte);
			byte[] byteArray=matOfByte.toArray();
			BufferedImage bufImage=null;
			try{
				InputStream in=new ByteArrayInputStream(byteArray);
				bufImage=ImageIO.read(in);
				JFrame frame=new JFrame();
				frame.setTitle(title);
				frame.getContentPane().add(new JLabel(new ImageIcon(bufImage)));
				frame.pack();
				frame.setVisible(true);

			}
			catch(Exception e){
				e.printStackTrace();
			}

		}
		public static Mat seuillage_exemple(Mat input, int seuilRougeViolet){
			// Decomposition en 3 cannaux HSV
			Vector<Mat> channels = MaBibliothequeTraitementImage.splitHSVChannels(input);
			//création d'un seuil 
			Scalar rougeviolet = new Scalar(seuilRougeViolet);
			//Création d'une matrice
			Mat rouges=new Mat();
			//Comparaison et saturation des pixels dont la composante rouge est plus grande que le seuil rougeViolet
			Core.compare(channels.get(2), rougeviolet, rouges, Core.CMP_GT);
			//image saturée à retourner
			return rouges;

		}
		
		 public static void main(String[] args)
		    {
		Mat imageOriginale=Highgui.imread("ref110.jpg",Highgui.CV_LOAD_IMAGE_COLOR);
		Mat imageTransformee=MaBibliothequeTraitementImage.transformeBGRversHSV(imageOriginale);
		Mat Image = MaBibliothequeTraitementImage.seuillage_exemple(imageTransformee, 10);
		afficheImage("test",Image);
		    }
}
